CPS 633 Lab 1 Part 5.  Group PS-3-04.
1.- Provided that the salts are added at the beginning of the password before hashing, the result of salting the password would completely invalidate any premade table, given that the salt is not known by the attacker beforehand. This means that the table would either have to be generated per request instead of a constant time lookup, or increase in size complexity to cover not only all the permutations of the hash, but also their salted permutations (an increase of 24 where 4 is the bit size of the salt ).
2.- For the purpose of program integrity, our team decided not to accept null passwords, given that they would crash the program. An attacker that knew of this could intentionally crash the server and abuse any vulnerabilities that it has in that state. With regards to the length of passwords, With knowledge of the algorithm used to hash the passwords, (provided that they're unsalted), attackers can just as easily defeat any passwords of length longer than 4;
3.- The attacker can tailor their solutions to specifically deal with the weaknesses of a particular function. In the scenario of function E(),  a cursory look at the function demonstrates that the function repeats operations for every few chars of the total string, which can reduce the attack complexity significantly. Furthermore, within the function for each block, the first character undergoes a consistent transformation that can be resolved with a single 28 element table, meaning that if the attacker realized this,  they could further reduce the complexity of their attack. This, along with the relatively simple nature of the function, allowed the cracker to compute all the hashes in a relatively short time. A better function would be more computationally expensive , and would offer less redundancy to maximize the amount of time that a potential attack would take. 
4.-  Ideally, I believe that an exponential increase in timeouts  over a moderate series of attempts will  provide enough flexibility for a few scatter-brained  users, yet be punishing enough for programs, as their attempts will be less focused.  This might leave a user locked out of their account for an impractical amount of time, and may leave the user subject to Availability attacks.
